def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
android {
    compileSdkVersion 27
    lintOptions {
        disable 'InvalidPackage'
    }
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.youngApps.uber"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 13
        versionName "1.12"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    signingConfigs{
        release{
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            ndk {
                abiFilters "x86", "armeabi-v7a", "armeabi"
                //abiFilters ABI_FILTERS
            }
            signingConfig signingConfigs.release
        }

        debug {
            ndk {
                abiFilters "x86", "armeabi-v7a", "armeabi"
                //abiFilters ABI_FILTERS
            }
        }


    }
    productFlavors {
    }
    dexOptions {
        incremental true
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation([
            'com.snapchat.kit.sdk:login:1.0.2', // for Login Kit
            'com.snapchat.kit.sdk:creative:1.0.2', // for Creative Kit
            'com.snapchat.kit.sdk:core:1.0.2', // for either
    ])
}






buildscript {
    repositories {
        jcenter()


        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath 'com.google.gms:google-services:3.1.0'


    }
}
apply plugin: 'com.google.gms.google-services'                        //new